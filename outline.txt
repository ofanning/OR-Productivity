When pressed in the chrome extension bar, extension should be on (maybe icon change).

1)Timer tab does not affect any of the browser content, so no messaging needed,
the javascript should be able to just work by being linked in normally to the timer.html page. Timer.js probably doens't even have to be a content script.
We do need to make sure the timer has really good functionality (can choose a few different lengths, maybe auto runs a break period, etc.) 
and looks really good.

However, as our final feature we should give the option to give notifications or alerts of some kind if the user isn't
typing enough or clicking enough while the timer is active. This WILL require that the background script listens first for whether the user
has turned this feature on (probably with a slider button), then continues to listen to whether the user is interacting or not. Because our notification won't 
change the content of the page, I don't think messaging anything to a content page will be necessary.



2)Blocking page. The single background script (can be divided amongst separate js files), needs to listen
for the user input into the chrome extension itself (should just be listening for the slider button being turned on), then 
send a message to a blocking content script file with the urls from the user input so that content script can can run logic to
"block" those urls by changing their html.
Another challenge is just getting the chrome extension to retain data/stay open...



I've laid out all the files I think we should need to implement, but as you can see still not 100% sure on some things.
I've also registered what I think needs to be registered in the manifest. However, we will more than likely have to add permissions for messaging maybe storage.
